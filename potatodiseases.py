# -*- coding: utf-8 -*-
"""PotatoDiseases.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E-5fCZVIjjNXBHyyphlP6rP4B9wW07AX

# **Potato Disease Classification**

**Note**
- *Task 1*: Put Dataset into drive and then mount the drive.
- *Task 2*: Create a testing framework
- *Task 3*: Learn to deploy using web framework

## **Importing Dependencies**
"""

import tensorflow as tf
from tensorflow.keras import models, layers
import matplotlib.pyplot as plt
from IPython.display import HTML
import numpy as np
import os

"""### **Constants**"""

BATCH_SIZE = 32
IMAGE_SIZE = 256
CHANNELS = 3
EPOCHS = 50

"""## **Working on the Dataset**

### **Importing**

Before importing, make sure to delete all the directories apart from the Potato directories.
"""

# Task 1

dataset = tf.keras.preprocessing.image_dataset_from_directory
(
    "PlantVillage",
    seed=123,
    shuffle=True,
    image_size=(IMAGE_SIZE,IMAGE_SIZE),
    batch_size=BATCH_SIZE
)

len(dataset)

"""### **Labels**"""

class_names = dataset.class_names
class_names

"""### **Understanding the Data**"""

for image_batch, labels_batch in dataset.take(1):
  print(image_batch.shape) # (32, 256, 256, 3) -> first element is a batch of 32 elements of images/
  print(labels_batch.numpy()) # [1 1 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 1 0 1 0 0 1 0 0 1 1 2 0 0] -> Labels

"""### **Visualising**"""

plt.figure(figsize = (10, 10))
for image_batch, labels_batch in dataset.take(1):
  # print(image_batch.shape)
  # print(label_batch.numpy())

  for i in range(12):
    ax = plt.subplot(3, 4, i + 1)
    plt.imshow(image_batch[i].numpy().astype("uint8"))
    plt.title(class_names[labels_batch[i]])
    plt.axis("off")

    # print(image_batch[i].numpy())

"""## **Preparation**

### **Splitting Data**

Splitting data into: train, validation, test.
"""

# train_size = 0.8
# # len(dataset) * train_size -> 54
# train_ds = dataset.take(54)
# # len(train_ds) -> 54
# test_ds = dataset.skip(54)
# # len(test_ds) -> 14
# val_size = 0.1
# # len(dataset) * val_size -> 6
# val_ds = test_ds.take(6)
# # len(val_ds) -> 6
# test_ds = test_ds.skip(6)
# # len(test_ds) -> 8

def get_dataset_partitions_tf(ds, train_split = 0.8, val_split = 0.1, test_split = 0.1, shuffle = True, shuffle_size = 10000):
  assert (train_split + test_split + val_split) == 1

  ds_size = len(ds)

  if shuffle:
    ds = ds.shuffle(shuffle_size, seed = 12)

  train_size = int(train_split * ds_size)
  val_size = int(val_split * ds_size)

  train_ds = ds.take(train_size)
  val_ds = ds.skip(train_size).take(val.size)
  test_ds = ds.skip(train_size).skip(val_size)

  return train_ds, val_ds, test_ds

train_ds, val_ds, test_ds = get_dataset_partitions_tf(dataset)

# len(train_ds) -> 54
# len(val_ds) -> 6
# len(test_ds) -> 8

"""### **Cache, Shuffle, and Prefetch the Dataset**"""

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)
val_ds = val_ds.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)
test_ds = test_ds.cache().shuffle(1000).prefetch(buffer_size = tf.data.AUTOTUNE)

"""## **Building the Model**

### **Resizing and Normalization**
"""

resize_and_rescale = tf.keras.Sequential([
    layers.experimental.prepocessing.Resizing(IMAGE_SIZE, IMAGE_SIZE),
    layers.experimental.preprocessing.Rescaling(1./255),
])

"""### **Data Augmentation**"""

data_augmentation = tf.keras.Sequential([
    layers.experimental.preprocessing.RandomFlip("horizontal_and_vertical"),
    layers.experimental.preprocessing.RandomRotation(0.2),
])

"""Application of Data Augmentation"""

train_ds = train_ds.map(
    lambda x, y: (data_augmentation(x, training = True), y)
).prefetch(buffer_size = tf.data.AUTOTUNE)

"""### **Model Architecture**"""

input_shape = (BATCH_SIZE, IMAGE_SIZE, IMAGE_SIZE, CHANNELS)
n_classes = 3

model = models.Sequential([
    resize_and_rescale,

    layers.Conv2D(32, kernel_size = (3,3), activation='relu', input_shape= input_shape),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64,  kernel_size = (3,3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64,  kernel_size = (3,3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),

    layers.Dense(64, activation='relu'),
    layers.Dense(n_classes, activation='softmax'),
])

model.build(input_shape = input_shape)

model.summary()

"""### **Compiling the Model**"""

model.compile(
    optimizer = "adam",
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = False)
    metrics = ["accuracy"]
)

history = model.fit(
    train_ds,
    batch_size = BATCH_SIZE,
    validation_data = val_ds,
    verbose = 1,
    epochs = 50
)

"""## **Evaluating and Plottings**"""

scores = model.evaluate(test_ds)
scores

history
history.params
history.history.keys()
type(history.history["loss"])
len(history.history["loss"])

history.history["loss"][:5]

acc = history.history["accuracy"]
val_acc = history.history["val_accuracy"] 

loss = history.history["loss"] 
val_loss = history.history["val_loss"]

plt.figure(figsize = (8, 8))
plt.subplot(1, 2, 1)
plt.plot(range(EPOCHS), acc, label = "Training Accuracy") 
plt.plot(range(EPOCHS), val_acc, label = "Validation Accuracy")
plt.legend(loc = "lower right")
plt.title("Training and Validation Accuracy")

plt.subplot(1, 2, 2)
plt.plot(range(EPOCHS), loss, label = "Training Loss")
plt.plot(range(EPOCHS), val_loss, label = "Validation Loss")
plt.legend(loc = "upper right")
plt.title("Training and Validation Loss")
plt.show()

"""## **Testing**"""

for images_batch, labels_batch in test_ds.take(1):
  first_image = images.batch[0].numpy().astype("uint8")
  first_label = labels_batch[0].numpy()

  print("first image to predict")
  plt.imshow(first_image)
  print("actual label: ", claas_names[first_label])

  batch_prediction = model.predict(images_batch)
  print("predicted label: ", class_names[np.argmax(batch_prediction[0])])

"""### **Function for Inference**"""

def predict(model, img):
  img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
  img_array = tf.expand_dims(img_array, 0)

  predictions = model.predict(img_array)

  predicted_class = class_names[np.argmax(predictions[0])]
  confidence = round(100 * (np.max(predictions[0])), 2)

  return predicted_class, confidence

plt.figure(figsize = (15, 15))
for images, labels in test_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imgshow(images[i].numpy().astype("uint8"))

    predicted_class, confidence = predict(model, images[i].numpy())
    actual_class = class_names[labels[i]]

    plt.title(f"Actual: {actual_class}, \n Predicted: {predicted_class}. \n Confidence: {confidence}%")

    plt.axis("off")

"""## **Saving the Model**"""

model_version = max([int(i) for i in os.listdir("../models") + [0]]) + 1
model.save(f"../models/{model_version}")